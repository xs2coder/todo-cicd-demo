name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to production?'
        required: true
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      environment:
        description: 'Target environment for manual deployment'
        required: true
        default: 'development'
        type: choice
        options:
        - 'development'
        - 'production'

jobs:
  # Job 1: Install dependencies and cache
  setup:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

  # Job 2: Linting and Code Quality
  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Restore cache
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint || true  # Don't fail build on lint errors for demo

  # Job 3: Unit Tests with Jest
  unit-tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Restore cache
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run Jest tests
      run: npm test -- --coverage --watchAll=false
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: success()

  # Job 4: Build Application
  build:
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Restore cache
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      env:
        NODE_ENV: production
        # This would come from Repository Secrets (if you set it up)
        REPO_SECRET: ${{secrets.REPO_SECRET}}

        # These would come from Repository Variables (if you set them up)
        REPO_VARIABLE: ${{vars.REPO_VARIABLE}}
        REACT_APP_REPO_SECRET: ${{secrets.REPO_SECRET}}
        REACT_APP_REPO_VARIABLE: ${{vars.REPO_VARIABLE}}
            # âœ… This works (GitHub provides it)
        REACT_APP_VERSION: ${{ github.sha }}
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: build/

  # Job 5: E2E Tests with Cypress
  e2e-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Restore cache
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: build/
    
    - name: Start application
      run: |
        npm install -g serve
        serve -s build -p 3000 &
        sleep 5
    
    - name: Run Cypress tests
      uses: cypress-io/github-action@v6
      with:
        start: serve -s build -p 3000
        wait-on: 'http://localhost:3000'
    
    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress/screenshots

  # Job 6: Deploy with Manual Approval (for automatic triggers)
  deploy:
    runs-on: ubuntu-latest
    needs: [build, e2e-tests]
    environment: 
      name: production
      url: https://your-username.github.io/your-repo-name
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: build/
    
    - name: Create runtime config file
      env:
        FAV_COLOR: ${{ vars.FAV_COLOR_ENV_VARIABLE }}
        FAV_FOOD: ${{ vars.FAV_FOOD_ENV_VARIABLE }}
        LAST_NAME: ${{ secrets.LAST_NAME }}
        VISA: ${{ secrets.VISA }}
      run: |
        echo "Creating runtime configuration for development..."
        cat > build/runtime-config.js << EOF
        // Runtime configuration loaded from development environment
        window.RUNTIME_CONFIG = {
          favColor: '${{ vars.FAV_COLOR_ENV_VARIABLE }}',
          favFood: '${{ vars.FAV_FOOD_ENV_VARIABLE }}',
          lastName: '${{ secrets.LAST_NAME }}',
          visa: '${{ secrets.VISA }}',
          environment: 'production',
          deployedAt: '$(date -u +"%Y-%m-%dT%H:%M:%SZ")'
        };
        console.log('Production config loaded:', window.RUNTIME_CONFIG);
        EOF
    
    - name: Update index.html with runtime config
      run: |
        # Insert the runtime config script into index.html
        sed -i 's|</head>|  <script src="./runtime-config.js"></script>\n</head>|' build/index.html
        echo "Updated index.html to include runtime configuration"
    

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build

  # Job 7: Deploy for Manual Trigger (immediate if chosen)
  deploy-manual:
    runs-on: ubuntu-latest
    needs: [build, e2e-tests]
    environment: 
      name: development
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.deploy == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: build/
    
    - name: Create runtime config file
      env:
        FAV_COLOR: ${{ vars.FAV_COLOR_ENV_VARIABLE }}
        FAV_FOOD: ${{ vars.FAV_FOOD_ENV_VARIABLE }}
        LAST_NAME: ${{ secrets.LAST_NAME }}
        VISA: ${{ secrets.VISA }}
      run: |
        echo "Creating runtime configuration for development..."
        cat > build/runtime-config.js << EOF
        // Runtime configuration loaded from development environment
        window.RUNTIME_CONFIG = {
          favColor: '${{ vars.FAV_COLOR_ENV_VARIABLE }}',
          favFood: '${{ vars.FAV_FOOD_ENV_VARIABLE }}',
          lastName: '${{ secrets.LAST_NAME }}',
          visa: '${{ secrets.VISA }}',
          environment: 'development',
          deployedAt: '$(date -u +"%Y-%m-%dT%H:%M:%SZ")'
        };
        console.log('Development config loaded:', window.RUNTIME_CONFIG);
        EOF
    
    - name: Update index.html with runtime config
      run: |
        # Insert the runtime config script into index.html
        sed -i 's|</head>|  <script src="./runtime-config.js"></script>\n</head>|' build/index.html
        echo "Updated index.html to include runtime configuration"
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build